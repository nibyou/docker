server {
    listen 80;
    server_name YOUR_DOMAIN;
    server_tokens off;


    location / {
        return 301 https://$host$request_uri;
    }
}

# Server Config
server {

    # listen 80;
    listen 443 ssl;
    server_name YOUR_DOMAIN;

    ssl_certificate /etc/letsencrypt/live/YOUR_DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/YOUR_DOMAIN/privkey.pem;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Keycloak intermediate OAuth server
    # <--------------------------->
        location ^~ /auth {
            try_files $uri $uri/ @kc_proxy;
        }
        location @kc_proxy {
            # adding gzip to static contents
            gzip_static on;

            # allow the CROS requests
            #add_header 'Access-Control-Allow-Origin' '*';
            #add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
            add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';

            # Without this, the application may mistakenly generate ‘http’ URLs in ‘https’ responses,
            # leading to mixed content warnings or broken applications.
            proxy_set_header X-Forwarded-Proto $scheme;
            # If you want to be able to handle streaming request/responses or other fancy features like Comet,
            # Long polling, or Web sockets, you need to turn off the proxy buffering.
            proxy_buffering off;

            proxy_pass http://keycloak:8080;
            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        }
}
